/******************************************************************
Site Name: Div Starter
Stylesheet: Mixins & Constants Stylesheet
******************************************************************/

/*********************
COLORS
*********************/
$white: 			#fff;
$black:				#000;
$alert-yellow:      #ebe16f;
$alert-red:         #fbe3e4;
$alert-green:       #e6efc2;
$alert-blue:        #d5edf8;

/*********************
RESPOND TO
@include respondTo($media);
NOTES:
	- $media ($smartphone, $tabletPortrait, $tabletLandscape, $desktop, $largeScreen)
*********************/
$smartphone: 480px;
$tabletPortrait: 767px;
$tabletLandscape: 1024px;
$desktop: 1174px;
$largeScreen: 1400px;
@mixin respondTo($media) {
  @if $media == smartphone {
    @media (max-width: $smartphone) { @content; }
  }
  @else if $media == tablet {
    @media (min-width: $tabletPortrait) and (max-width: $tabletLandscape) { @content; }
  }
  @else if $media == smallScreen {
    @media (max-width: $desktop) { @content; }
  }
  @else if $media == desktop {
    @media (min-width: $desktop) { @content; }
  }
}

/*********************
TRANISTION
@include transition(all 0.2s ease-in-out);
NOTES:
	- Rewritten to be cleaner and easier to use, but you will
	 need to be using Sass 3.2+ for these to work.
	- Thanks to @anthonyshort for the inspiration on these.
*********************/
@mixin transition($transition...) {
	// defining prefixes so we can use them in mixins below
	$prefixes:      ("-webkit", "-ms", "-o",  "");
  @each $prefix in $prefixes {
    #{$prefix}-transition: $transition;
  }

  transition: $transition;
}

/*********************
CSS3 GRADIENTS
@include css-gradient(#dfdfdf,#f8f8f8);
NOTES:
	-Be careful with these since they can really slow down your CSS. Don't overdue it.
	-added support for IE
*********************/
@mixin css-gradient($from, $to) {
	background-color: $to;
	background-image: -webkit-gradient(linear, left top, left bottom, from($from), to($to));
	background-image: -webkit-linear-gradient(top, $from, $to);
	background-image: -moz-linear-gradient(top, $from, $to);
	background-image: -o-linear-gradient(top, $from, $to);
	background-image: linear-gradient(to bottom, $from, $to);
    filter: progid:DXImageTransform.Microsoft.gradient(GradientType=0, startColorstr='#{ie-hex-str($from)}', endColorstr='#{ie-hex-str($to)}');
}

/*********************
CSS3 BOX SHADOW
@include box-shadow(0, 0, 10px, 0, #444444, "");
*********************/
@mixin box-shadow($top, $left, $blur, $spread, $color, $inset:"") {
      -webkit-box-shadow:$top $left $blur $spread #{$inset};
      -moz-box-shadow:$top $left $blur $spread #{$inset};
      box-shadow:$top $left $blur $spread #{$inset};
      -o-box-shadow:$top $left $blur $spread #{$inset};
}

/*********************
BOX SIZING
@include box-sizing(border-box);
NOTE: 
	- Value of "padding-box" is only supported in Gecko. So probably best not to use it.
*********************/
@mixin box-sizing($type: border-box) {
	-webkit-box-sizing: $type;
	-moz-box-sizing:    $type;
	-ms-box-sizing:     $type;
	box-sizing:         $type;
}

/*********************
TRIANGLE
@include triangle($direction, $size: 6px, $color: #222)
NOTES:
	- $direction: up, down, left, right
	- Within a pseudo element and add positioning properties (ie. top, left)
*********************/
@mixin triangle($direction, $size: 6px, $color: #222){
  content: '';
  display: block;
  position: absolute;
  height: 0; width: 0;
  @if ($direction == 'up'){
    border-bottom: $size solid $color;
    border-left: 1/2*$size solid transparent;
    border-right: 1/2*$size solid transparent;
  }
  @else if ($direction == 'down'){
    border-top: $size solid $color;
    border-left: 1/2*$size solid transparent;
    border-right: 1/2*$size solid transparent;
  }
  @else if ($direction == 'left'){
    border-top: 1/2*$size solid transparent;
    border-bottom: 1/2*$size solid transparent;
    border-right: $size solid $color;
  }
  @else if ($direction == 'right'){
    border-top: 1/2*$size solid transparent;
    border-bottom: 1/2*$size solid transparent;
    border-left: $size solid $color;
  }
}

/*********************
CURRENCY
	<PARENT class="USD">    
	    <span class="price">45</span>
	</PARENT>

	.price {
	    @extend %currency;
	}
*********************/
%currency {
  position: relative;
  &:before {
    content: '$';
    position: relative;
    left: 0;
  }
}
.USD %currency:before { content: '$'; }
.EUR %currency:before { content: '\20AC'; } // must escape the html entities for each currency symbol
.ILS %currency:before { content: '\20AA'; }
.GBP %currency:before { content: '\00A3'; }

/*********************
VERTICAL ALIGN (GHOST)
@include verticalAlign()
NOTES:
	- This is a slightly modified version of a CSS-Tricks method
	 for vertically centering elements with a dynamic size. 
	 Works beautifully and doesn’t require an extra, non-semantic HTML element.
*********************/
@mixin verticalAlign(){
  &:before {
    content: '';
    display: inline-block;
    vertical-align: middle;
    height: 100%; width: .1px;
  }
}

/*********************
TRUNCATE TEXT
@include truncateText()
NOTES:
	- This is a slightly modified version of a CSS-Tricks method
	 for vertically centering elements with a dynamic size. 
	 Works beautifully and doesn’t require an extra, non-semantic HTML element.
*********************/
@mixin truncateText($overflow: ellipsis){
  overflow: hidden;
  white-space: nowrap;
  text-overflow: $overflow; // values are: clip, ellipsis, or a string
}